                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _UART1_GetFlagStatus
                                     13 	.globl _UART1_SendData8
                                     14 	.globl _UART1_ReceiveData8
                                     15 	.globl _UART1_HalfDuplexCmd
                                     16 	.globl _UART1_Init
                                     17 	.globl _UART1_DeInit
                                     18 	.globl _GPIO_Init
                                     19 	.globl _CLK_HSIPrescalerConfig
                                     20 	.globl _TransferStatus2
                                     21 	.globl _TransferStatus1
                                     22 	.globl _RxCounter2
                                     23 	.globl _TxCounter2
                                     24 	.globl _RxCounter1
                                     25 	.globl _TxCounter1
                                     26 	.globl _NbrOfDataToRead2
                                     27 	.globl _NbrOfDataToRead1
                                     28 	.globl _RxBuffer2
                                     29 	.globl _RxBuffer1
                                     30 	.globl _TxBuffer2
                                     31 	.globl _TxBuffer1
                                     32 	.globl _Buffercmp
                                     33 	.globl _assert_failed
                                     34 ;--------------------------------------------------------
                                     35 ; ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area DATA
                                     38 ;--------------------------------------------------------
                                     39 ; ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area INITIALIZED
      000000                         42 _TxBuffer1::
      000000                         43 	.ds 57
      000039                         44 _TxBuffer2::
      000039                         45 	.ds 57
      000072                         46 _RxBuffer1::
      000072                         47 	.ds 56
      0000AA                         48 _RxBuffer2::
      0000AA                         49 	.ds 56
      0000E2                         50 _NbrOfDataToRead1::
      0000E2                         51 	.ds 1
      0000E3                         52 _NbrOfDataToRead2::
      0000E3                         53 	.ds 1
      0000E4                         54 _TxCounter1::
      0000E4                         55 	.ds 1
      0000E5                         56 _RxCounter1::
      0000E5                         57 	.ds 1
      0000E6                         58 _TxCounter2::
      0000E6                         59 	.ds 1
      0000E7                         60 _RxCounter2::
      0000E7                         61 	.ds 1
      0000E8                         62 _TransferStatus1::
      0000E8                         63 	.ds 1
      0000E9                         64 _TransferStatus2::
      0000E9                         65 	.ds 1
                                     66 ;--------------------------------------------------------
                                     67 ; Stack segment in internal ram 
                                     68 ;--------------------------------------------------------
                                     69 	.area	SSEG
      000000                         70 __start__stack:
      000000                         71 	.ds	1
                                     72 
                                     73 ;--------------------------------------------------------
                                     74 ; absolute external ram data
                                     75 ;--------------------------------------------------------
                                     76 	.area DABS (ABS)
                                     77 
                                     78 ; default segment ordering for linker
                                     79 	.area HOME
                                     80 	.area GSINIT
                                     81 	.area GSFINAL
                                     82 	.area CONST
                                     83 	.area INITIALIZER
                                     84 	.area CODE
                                     85 
                                     86 ;--------------------------------------------------------
                                     87 ; interrupt vector 
                                     88 ;--------------------------------------------------------
                                     89 	.area HOME
      000000                         90 __interrupt_vect:
      000000 82v00u00u00             91 	int s_GSINIT ; reset
      000004 82v00u00u00             92 	int _TRAP_IRQHandler ; trap
      000008 82v00u00u00             93 	int _TLI_IRQHandler ; int0
      00000C 82v00u00u00             94 	int _AWU_IRQHandler ; int1
      000010 82v00u00u00             95 	int _CLK_IRQHandler ; int2
      000014 82v00u00u00             96 	int _EXTI_PORTA_IRQHandler ; int3
      000018 82v00u00u00             97 	int _EXTI_PORTB_IRQHandler ; int4
      00001C 82v00u00u00             98 	int _EXTI_PORTC_IRQHandler ; int5
      000020 82v00u00u00             99 	int _EXTI_PORTD_IRQHandler ; int6
      000024 82v00u00u00            100 	int _EXTI_PORTE_IRQHandler ; int7
      000028 82 00 00 00            101 	int 0x000000 ; int8
      00002C 82 00 00 00            102 	int 0x000000 ; int9
      000030 82v00u00u00            103 	int _SPI_IRQHandler ; int10
      000034 82v00u00u00            104 	int _TIM1_UPD_OVF_TRG_BRK_IRQHandler ; int11
      000038 82v00u00u00            105 	int _TIM1_CAP_COM_IRQHandler ; int12
      00003C 82v00u00u00            106 	int _TIM2_UPD_OVF_BRK_IRQHandler ; int13
      000040 82v00u00u00            107 	int _TIM2_CAP_COM_IRQHandler ; int14
      000044 82 00 00 00            108 	int 0x000000 ; int15
      000048 82 00 00 00            109 	int 0x000000 ; int16
      00004C 82v00u00u00            110 	int _UART1_TX_IRQHandler ; int17
      000050 82v00u00u00            111 	int _UART1_RX_IRQHandler ; int18
      000054 82v00u00u00            112 	int _I2C_IRQHandler ; int19
      000058 82 00 00 00            113 	int 0x000000 ; int20
      00005C 82 00 00 00            114 	int 0x000000 ; int21
      000060 82v00u00u00            115 	int _ADC1_IRQHandler ; int22
      000064 82v00u00u00            116 	int _TIM4_UPD_OVF_IRQHandler ; int23
      000068 82v00u00u00            117 	int _EEPROM_EEC_IRQHandler ; int24
                                    118 ;--------------------------------------------------------
                                    119 ; global & static initialisations
                                    120 ;--------------------------------------------------------
                                    121 	.area HOME
                                    122 	.area GSINIT
                                    123 	.area GSFINAL
                                    124 	.area GSINIT
      000000                        125 __sdcc_init_data:
                                    126 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]  127 	ldw x, #l_DATA
      000003 27 07            [ 1]  128 	jreq	00002$
      000005                        129 00001$:
      000005 72 4FuFFuFF      [ 1]  130 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  131 	decw x
      00000A 26 F9            [ 1]  132 	jrne	00001$
      00000C                        133 00002$:
      00000C AEr00r00         [ 2]  134 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  135 	jreq	00004$
      000011                        136 00003$:
      000011 D6uFFuFF         [ 1]  137 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  138 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  139 	decw	x
      000018 26 F7            [ 1]  140 	jrne	00003$
      00001A                        141 00004$:
                                    142 ; stm8_genXINIT() end
                                    143 	.area GSFINAL
      000000 CCr00r6C         [ 2]  144 	jp	__sdcc_program_startup
                                    145 ;--------------------------------------------------------
                                    146 ; Home
                                    147 ;--------------------------------------------------------
                                    148 	.area HOME
                                    149 	.area HOME
      00006C                        150 __sdcc_program_startup:
      00006C CCr00r00         [ 2]  151 	jp	_main
                                    152 ;	return from main will return to caller
                                    153 ;--------------------------------------------------------
                                    154 ; code
                                    155 ;--------------------------------------------------------
                                    156 	.area CODE
                                    157 ;	src\main.c: 76: void main(void)
                                    158 ;	-----------------------------------------
                                    159 ;	 function main
                                    160 ;	-----------------------------------------
      000000                        161 _main:
                                    162 ;	src\main.c: 79: GPIO_Config();
      000000 CDr00r8F         [ 4]  163 	call	_GPIO_Config
                                    164 ;	src\main.c: 82: CLK_Config();
      000003 CDr00r88         [ 4]  165 	call	_CLK_Config
                                    166 ;	src\main.c: 85: UART_Config();  
      000006 CDr00r9D         [ 4]  167 	call	_UART_Config
                                    168 ;	src\main.c: 89: while (NbrOfDataToRead2--)
      000009                        169 00104$:
      000009 C6u00uE3         [ 1]  170 	ld	a, _NbrOfDataToRead2+0
      00000C 72 5Au00uE3      [ 1]  171 	dec	_NbrOfDataToRead2+0
      000010 4D               [ 1]  172 	tnz	a
      000011 27 1E            [ 1]  173 	jreq	00106$
                                    174 ;	src\main.c: 92: while (UART1_GetFlagStatus(UART1_FLAG_TXE) == RESET)
      000013                        175 00101$:
      000013 4B 80            [ 1]  176 	push	#0x80
      000015 4B 00            [ 1]  177 	push	#0x00
      000017 CDr00r00         [ 4]  178 	call	_UART1_GetFlagStatus
      00001A 85               [ 2]  179 	popw	x
      00001B 4D               [ 1]  180 	tnz	a
      00001C 27 F5            [ 1]  181 	jreq	00101$
                                    182 ;	src\main.c: 96: UART1_SendData8(TxBuffer1[TxCounter1++]);
      00001E C6u00uE4         [ 1]  183 	ld	a, _TxCounter1+0
      000021 72 5Cu00uE4      [ 1]  184 	inc	_TxCounter1+0
      000025 5F               [ 1]  185 	clrw	x
      000026 97               [ 1]  186 	ld	xl, a
      000027 D6u00u00         [ 1]  187 	ld	a, (_TxBuffer1+0, x)
      00002A 88               [ 1]  188 	push	a
      00002B CDr00r00         [ 4]  189 	call	_UART1_SendData8
      00002E 84               [ 1]  190 	pop	a
      00002F 20 D8            [ 2]  191 	jra	00104$
      000031                        192 00106$:
                                    193 ;	src\main.c: 107: TransferStatus1 = Buffercmp(TxBuffer1, RxBuffer2, TxBufferSize1);
      000031 4B 38            [ 1]  194 	push	#0x38
      000033 4B 00            [ 1]  195 	push	#0x00
      000035 4BrAA            [ 1]  196 	push	#<(_RxBuffer2+0)
      000037 4Bs00            [ 1]  197 	push	#((_RxBuffer2+0) >> 8)
      000039 4Br00            [ 1]  198 	push	#<(_TxBuffer1+0)
      00003B 4Bs00            [ 1]  199 	push	#((_TxBuffer1+0) >> 8)
      00003D CDr00rBE         [ 4]  200 	call	_Buffercmp
      000040 5B 06            [ 2]  201 	addw	sp, #6
      000042 C7u00uE8         [ 1]  202 	ld	_TransferStatus1+0, a
                                    203 ;	src\main.c: 115: UART1_ReceiveData8();
      000045 CDr00r00         [ 4]  204 	call	_UART1_ReceiveData8
                                    205 ;	src\main.c: 117: while (NbrOfDataToRead1--)
      000048                        206 00110$:
      000048 C6u00uE2         [ 1]  207 	ld	a, _NbrOfDataToRead1+0
      00004B 72 5Au00uE2      [ 1]  208 	dec	_NbrOfDataToRead1+0
      00004F 4D               [ 1]  209 	tnz	a
      000050 27 1F            [ 1]  210 	jreq	00112$
                                    211 ;	src\main.c: 127: while (UART1_GetFlagStatus(UART1_FLAG_RXNE) == RESET)
      000052                        212 00107$:
      000052 4B 20            [ 1]  213 	push	#0x20
      000054 4B 00            [ 1]  214 	push	#0x00
      000056 CDr00r00         [ 4]  215 	call	_UART1_GetFlagStatus
      000059 85               [ 2]  216 	popw	x
      00005A 4D               [ 1]  217 	tnz	a
      00005B 27 F5            [ 1]  218 	jreq	00107$
                                    219 ;	src\main.c: 131: RxBuffer1[RxCounter1++] = UART1_ReceiveData8();
      00005D C6u00uE5         [ 1]  220 	ld	a, _RxCounter1+0
      000060 72 5Cu00uE5      [ 1]  221 	inc	_RxCounter1+0
      000064 5F               [ 1]  222 	clrw	x
      000065 97               [ 1]  223 	ld	xl, a
      000066 1Cr00r72         [ 2]  224 	addw	x, #(_RxBuffer1+0)
      000069 89               [ 2]  225 	pushw	x
      00006A CDr00r00         [ 4]  226 	call	_UART1_ReceiveData8
      00006D 85               [ 2]  227 	popw	x
      00006E F7               [ 1]  228 	ld	(x), a
      00006F 20 D7            [ 2]  229 	jra	00110$
      000071                        230 00112$:
                                    231 ;	src\main.c: 135: TransferStatus2 = Buffercmp(TxBuffer2, RxBuffer1, TxBufferSize2);
      000071 4B 38            [ 1]  232 	push	#0x38
      000073 4B 00            [ 1]  233 	push	#0x00
      000075 4Br72            [ 1]  234 	push	#<(_RxBuffer1+0)
      000077 4Bs00            [ 1]  235 	push	#((_RxBuffer1+0) >> 8)
      000079 4Br39            [ 1]  236 	push	#<(_TxBuffer2+0)
      00007B 4Bs00            [ 1]  237 	push	#((_TxBuffer2+0) >> 8)
      00007D CDr00rBE         [ 4]  238 	call	_Buffercmp
      000080 5B 06            [ 2]  239 	addw	sp, #6
      000082 C7u00uE9         [ 1]  240 	ld	_TransferStatus2+0, a
                                    241 ;	src\main.c: 141: while (1)
      000085                        242 00114$:
      000085 20 FE            [ 2]  243 	jra	00114$
                                    244 ;	src\main.c: 143: }
      000087 81               [ 4]  245 	ret
                                    246 ;	src\main.c: 150: static void CLK_Config(void)
                                    247 ;	-----------------------------------------
                                    248 ;	 function CLK_Config
                                    249 ;	-----------------------------------------
      000088                        250 _CLK_Config:
                                    251 ;	src\main.c: 154: CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
      000088 4B 00            [ 1]  252 	push	#0x00
      00008A CDr00r00         [ 4]  253 	call	_CLK_HSIPrescalerConfig
      00008D 84               [ 1]  254 	pop	a
                                    255 ;	src\main.c: 155: }
      00008E 81               [ 4]  256 	ret
                                    257 ;	src\main.c: 162: static void GPIO_Config(void)
                                    258 ;	-----------------------------------------
                                    259 ;	 function GPIO_Config
                                    260 ;	-----------------------------------------
      00008F                        261 _GPIO_Config:
                                    262 ;	src\main.c: 165: GPIO_Init(GPIOA, GPIO_PIN_5, GPIO_MODE_OUT_OD_HIZ_FAST);
      00008F 4B B0            [ 1]  263 	push	#0xb0
      000091 4B 20            [ 1]  264 	push	#0x20
      000093 4B 00            [ 1]  265 	push	#0x00
      000095 4B 50            [ 1]  266 	push	#0x50
      000097 CDr00r00         [ 4]  267 	call	_GPIO_Init
      00009A 5B 04            [ 2]  268 	addw	sp, #4
                                    269 ;	src\main.c: 166: }
      00009C 81               [ 4]  270 	ret
                                    271 ;	src\main.c: 173: static void UART_Config(void)
                                    272 ;	-----------------------------------------
                                    273 ;	 function UART_Config
                                    274 ;	-----------------------------------------
      00009D                        275 _UART_Config:
                                    276 ;	src\main.c: 182: UART1_DeInit();
      00009D CDr00r00         [ 4]  277 	call	_UART1_DeInit
                                    278 ;	src\main.c: 183: UART1_Init((uint32_t)230400, UART1_WORDLENGTH_8D, UART1_STOPBITS_1, UART1_PARITY_NO,
      0000A0 4B 0C            [ 1]  279 	push	#0x0c
      0000A2 4B 80            [ 1]  280 	push	#0x80
      0000A4 4B 00            [ 1]  281 	push	#0x00
      0000A6 4B 00            [ 1]  282 	push	#0x00
      0000A8 4B 00            [ 1]  283 	push	#0x00
      0000AA 4B 00            [ 1]  284 	push	#0x00
      0000AC 4B 84            [ 1]  285 	push	#0x84
      0000AE 4B 03            [ 1]  286 	push	#0x03
      0000B0 4B 00            [ 1]  287 	push	#0x00
      0000B2 CDr00r00         [ 4]  288 	call	_UART1_Init
      0000B5 5B 09            [ 2]  289 	addw	sp, #9
                                    290 ;	src\main.c: 191: UART1_HalfDuplexCmd(ENABLE);
      0000B7 4B 01            [ 1]  291 	push	#0x01
      0000B9 CDr00r00         [ 4]  292 	call	_UART1_HalfDuplexCmd
      0000BC 84               [ 1]  293 	pop	a
                                    294 ;	src\main.c: 192: }
      0000BD 81               [ 4]  295 	ret
                                    296 ;	src\main.c: 205: TestStatus Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
                                    297 ;	-----------------------------------------
                                    298 ;	 function Buffercmp
                                    299 ;	-----------------------------------------
      0000BE                        300 _Buffercmp:
      0000BE 52 06            [ 2]  301 	sub	sp, #6
                                    302 ;	src\main.c: 207: while (BufferLength--)
      0000C0 16 09            [ 2]  303 	ldw	y, (0x09, sp)
      0000C2 17 03            [ 2]  304 	ldw	(0x03, sp), y
      0000C4 16 0B            [ 2]  305 	ldw	y, (0x0b, sp)
      0000C6 17 05            [ 2]  306 	ldw	(0x05, sp), y
      0000C8 16 0D            [ 2]  307 	ldw	y, (0x0d, sp)
      0000CA                        308 00103$:
      0000CA 17 01            [ 2]  309 	ldw	(0x01, sp), y
      0000CC 90 5A            [ 2]  310 	decw	y
      0000CE 1E 01            [ 2]  311 	ldw	x, (0x01, sp)
      0000D0 27 1D            [ 1]  312 	jreq	00105$
                                    313 ;	src\main.c: 209: if (*pBuffer1 != *pBuffer2)
      0000D2 1E 03            [ 2]  314 	ldw	x, (0x03, sp)
      0000D4 F6               [ 1]  315 	ld	a, (x)
      0000D5 1E 05            [ 2]  316 	ldw	x, (0x05, sp)
      0000D7 88               [ 1]  317 	push	a
      0000D8 F6               [ 1]  318 	ld	a, (x)
      0000D9 6B 03            [ 1]  319 	ld	(0x03, sp), a
      0000DB 84               [ 1]  320 	pop	a
      0000DC 11 02            [ 1]  321 	cp	a, (0x02, sp)
      0000DE 27 03            [ 1]  322 	jreq	00102$
                                    323 ;	src\main.c: 211: return FAILED;
      0000E0 4F               [ 1]  324 	clr	a
      0000E1 20 0E            [ 2]  325 	jra	00106$
      0000E3                        326 00102$:
                                    327 ;	src\main.c: 214: pBuffer1++;
      0000E3 1E 03            [ 2]  328 	ldw	x, (0x03, sp)
      0000E5 5C               [ 1]  329 	incw	x
      0000E6 1F 03            [ 2]  330 	ldw	(0x03, sp), x
                                    331 ;	src\main.c: 215: pBuffer2++;
      0000E8 1E 05            [ 2]  332 	ldw	x, (0x05, sp)
      0000EA 5C               [ 1]  333 	incw	x
      0000EB 1F 05            [ 2]  334 	ldw	(0x05, sp), x
      0000ED 20 DB            [ 2]  335 	jra	00103$
      0000EF                        336 00105$:
                                    337 ;	src\main.c: 218: return PASSED;
      0000EF A6 01            [ 1]  338 	ld	a, #0x01
      0000F1                        339 00106$:
                                    340 ;	src\main.c: 219: }
      0000F1 5B 06            [ 2]  341 	addw	sp, #6
      0000F3 81               [ 4]  342 	ret
                                    343 ;	src\main.c: 229: void assert_failed(uint8_t* file, uint32_t line)
                                    344 ;	-----------------------------------------
                                    345 ;	 function assert_failed
                                    346 ;	-----------------------------------------
      0000F4                        347 _assert_failed:
                                    348 ;	src\main.c: 235: while (1)
      0000F4                        349 00102$:
      0000F4 20 FE            [ 2]  350 	jra	00102$
                                    351 ;	src\main.c: 239: }
      0000F6 81               [ 4]  352 	ret
                                    353 	.area CODE
                                    354 	.area CONST
                                    355 	.area INITIALIZER
      000000                        356 __xinit__TxBuffer1:
      000000 48 61 6C 66 44 75 70   357 	.ascii "HalfDuplex Example: UART1 -> UART3 using HalfDuplex mode"
             6C 65 78 20 45 78 61
             6D 70 6C 65 3A 20 55
             41 52 54 31 20 2D 3E
             20 55 41 52 54 33 20
             75 73 69 6E 67 20 48
             61 6C 66 44 75 70 6C
             65 78 20 6D 6F 64 65
      000038 00                     358 	.db 0x00
      000039                        359 __xinit__TxBuffer2:
      000039 48 61 6C 66 44 75 70   360 	.ascii "HalfDuplex Example: UART3 -> UART1 using HalfDuplex mode"
             6C 65 78 20 45 78 61
             6D 70 6C 65 3A 20 55
             41 52 54 33 20 2D 3E
             20 55 41 52 54 31 20
             75 73 69 6E 67 20 48
             61 6C 66 44 75 70 6C
             65 78 20 6D 6F 64 65
      000071 00                     361 	.db 0x00
      000072                        362 __xinit__RxBuffer1:
      000072 00                     363 	.db #0x00	; 0
      000073 00                     364 	.db 0x00
      000074 00                     365 	.db 0x00
      000075 00                     366 	.db 0x00
      000076 00                     367 	.db 0x00
      000077 00                     368 	.db 0x00
      000078 00                     369 	.db 0x00
      000079 00                     370 	.db 0x00
      00007A 00                     371 	.db 0x00
      00007B 00                     372 	.db 0x00
      00007C 00                     373 	.db 0x00
      00007D 00                     374 	.db 0x00
      00007E 00                     375 	.db 0x00
      00007F 00                     376 	.db 0x00
      000080 00                     377 	.db 0x00
      000081 00                     378 	.db 0x00
      000082 00                     379 	.db 0x00
      000083 00                     380 	.db 0x00
      000084 00                     381 	.db 0x00
      000085 00                     382 	.db 0x00
      000086 00                     383 	.db 0x00
      000087 00                     384 	.db 0x00
      000088 00                     385 	.db 0x00
      000089 00                     386 	.db 0x00
      00008A 00                     387 	.db 0x00
      00008B 00                     388 	.db 0x00
      00008C 00                     389 	.db 0x00
      00008D 00                     390 	.db 0x00
      00008E 00                     391 	.db 0x00
      00008F 00                     392 	.db 0x00
      000090 00                     393 	.db 0x00
      000091 00                     394 	.db 0x00
      000092 00                     395 	.db 0x00
      000093 00                     396 	.db 0x00
      000094 00                     397 	.db 0x00
      000095 00                     398 	.db 0x00
      000096 00                     399 	.db 0x00
      000097 00                     400 	.db 0x00
      000098 00                     401 	.db 0x00
      000099 00                     402 	.db 0x00
      00009A 00                     403 	.db 0x00
      00009B 00                     404 	.db 0x00
      00009C 00                     405 	.db 0x00
      00009D 00                     406 	.db 0x00
      00009E 00                     407 	.db 0x00
      00009F 00                     408 	.db 0x00
      0000A0 00                     409 	.db 0x00
      0000A1 00                     410 	.db 0x00
      0000A2 00                     411 	.db 0x00
      0000A3 00                     412 	.db 0x00
      0000A4 00                     413 	.db 0x00
      0000A5 00                     414 	.db 0x00
      0000A6 00                     415 	.db 0x00
      0000A7 00                     416 	.db 0x00
      0000A8 00                     417 	.db 0x00
      0000A9 00                     418 	.db 0x00
      0000AA                        419 __xinit__RxBuffer2:
      0000AA 00                     420 	.db #0x00	; 0
      0000AB 00                     421 	.db 0x00
      0000AC 00                     422 	.db 0x00
      0000AD 00                     423 	.db 0x00
      0000AE 00                     424 	.db 0x00
      0000AF 00                     425 	.db 0x00
      0000B0 00                     426 	.db 0x00
      0000B1 00                     427 	.db 0x00
      0000B2 00                     428 	.db 0x00
      0000B3 00                     429 	.db 0x00
      0000B4 00                     430 	.db 0x00
      0000B5 00                     431 	.db 0x00
      0000B6 00                     432 	.db 0x00
      0000B7 00                     433 	.db 0x00
      0000B8 00                     434 	.db 0x00
      0000B9 00                     435 	.db 0x00
      0000BA 00                     436 	.db 0x00
      0000BB 00                     437 	.db 0x00
      0000BC 00                     438 	.db 0x00
      0000BD 00                     439 	.db 0x00
      0000BE 00                     440 	.db 0x00
      0000BF 00                     441 	.db 0x00
      0000C0 00                     442 	.db 0x00
      0000C1 00                     443 	.db 0x00
      0000C2 00                     444 	.db 0x00
      0000C3 00                     445 	.db 0x00
      0000C4 00                     446 	.db 0x00
      0000C5 00                     447 	.db 0x00
      0000C6 00                     448 	.db 0x00
      0000C7 00                     449 	.db 0x00
      0000C8 00                     450 	.db 0x00
      0000C9 00                     451 	.db 0x00
      0000CA 00                     452 	.db 0x00
      0000CB 00                     453 	.db 0x00
      0000CC 00                     454 	.db 0x00
      0000CD 00                     455 	.db 0x00
      0000CE 00                     456 	.db 0x00
      0000CF 00                     457 	.db 0x00
      0000D0 00                     458 	.db 0x00
      0000D1 00                     459 	.db 0x00
      0000D2 00                     460 	.db 0x00
      0000D3 00                     461 	.db 0x00
      0000D4 00                     462 	.db 0x00
      0000D5 00                     463 	.db 0x00
      0000D6 00                     464 	.db 0x00
      0000D7 00                     465 	.db 0x00
      0000D8 00                     466 	.db 0x00
      0000D9 00                     467 	.db 0x00
      0000DA 00                     468 	.db 0x00
      0000DB 00                     469 	.db 0x00
      0000DC 00                     470 	.db 0x00
      0000DD 00                     471 	.db 0x00
      0000DE 00                     472 	.db 0x00
      0000DF 00                     473 	.db 0x00
      0000E0 00                     474 	.db 0x00
      0000E1 00                     475 	.db 0x00
      0000E2                        476 __xinit__NbrOfDataToRead1:
      0000E2 38                     477 	.db #0x38	; 56	'8'
      0000E3                        478 __xinit__NbrOfDataToRead2:
      0000E3 38                     479 	.db #0x38	; 56	'8'
      0000E4                        480 __xinit__TxCounter1:
      0000E4 00                     481 	.db #0x00	; 0
      0000E5                        482 __xinit__RxCounter1:
      0000E5 00                     483 	.db #0x00	; 0
      0000E6                        484 __xinit__TxCounter2:
      0000E6 00                     485 	.db #0x00	; 0
      0000E7                        486 __xinit__RxCounter2:
      0000E7 00                     487 	.db #0x00	; 0
      0000E8                        488 __xinit__TransferStatus1:
      0000E8 00                     489 	.db #0x00	; 0
      0000E9                        490 __xinit__TransferStatus2:
      0000E9 00                     491 	.db #0x00	; 0
                                    492 	.area CABS (ABS)
